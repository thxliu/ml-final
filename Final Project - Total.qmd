---
title: "Final Project"
author: "Tana Liu, Tajhini Brown"
format: pdf
---

### Loading the data
```{r}
library(tidyverse)

spotify <- read.csv("/Users/tanaliu/Desktop/CSC293/Final Project/dataset.csv")
spotify <- subset(spotify, select = -X )
```

### Training a RF model and determining variable importance 
```{r}
library(randomForest)
set.seed(1)

# Setting character variables as factors
spotify$track_genre <- factor(spotify$track_genre) 

# Creating training and testing datasets
train <- sample(1:nrow(spotify), nrow(spotify) / 2)
test <- spotify[-train, ]

# random forest model
rf <- randomForest(track_genre ~ time_signature + tempo + valence + liveness + instrumentalness + acousticness + speechiness + mode + loudness + key + energy + danceability + explicit + duration_ms, data = spotify, subset = train, mtry = sqrt(14), ntree = 25, importance = TRUE)

yhat_rf <- predict(rf, newdata = spotify[-train, ])

importance(rf)
varImpPlot(rf)
```

### Calculating the classicification accuracy

```{r}
classification_error <- mean(yhat_rf != test$track_genre)
accuracy <- mean(yhat_rf == test$track_genre)
```

### Optimizing mtry with tuneRF
```{r}
tune_result <- tuneRF(
  x = spotify[train, -which(names(spotify) == "track_genre")],
  y = spotify$track_genre[train],
  stepFactor = 1.5,
  improve = 0.01,
  ntreeTry = 100,
  trace = TRUE
)
```

### Removing some non-important variables and trying optimal mtry on a new model
```{r}
rf_new <- randomForest(track_genre ~ tempo + valence + liveness + instrumentalness + acousticness + speechiness + loudness + key + energy + danceability + duration_ms, data = spotify, subset = train, mtry = 6, ntree = 100, importance = TRUE)

predict_new <- predict(rf_new, newdata = spotify[-train, ])

ce_new <- mean(predict_new != test$track_genre)
accuracy_new <- mean(predict_new == test$track_genre)
```


